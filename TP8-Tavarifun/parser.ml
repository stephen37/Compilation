type token =
  | AND
  | BOOL
  | COLON
  | COMP of (Ast.binop)
  | CONST_BOOL of (bool)
  | CONST_INT of (int)
  | CONST_UNIT
  | DOUBLE_EQUAL
  | ELSE
  | EOF
  | EOI
  | EQUAL
  | IDENT of (string)
  | IF
  | IN
  | INT
  | LET
  | LPAREN
  | MINUS
  | NEQ
  | NOT
  | OR
  | PLUS
  | PRINT_INT
  | PRINT_NEWLINE
  | REC
  | RPAREN
  | SEMI
  | SLASH
  | STAR
  | THEN
  | UNIT
  | REF
  | GET_REF
  | SET_REF
  | NONE
  | SOME
  | OPTION
  | TYPE
  | MUTABLE
  | LBRACE
  | RBRACE
  | DOT
  | LT_MINUS

open Parsing;;
# 2 "parser.mly"

  open Ast

  let current_pos () =
    Parsing.symbol_start_pos (),
    Parsing.symbol_end_pos ()

  let mk_node e = { expr = e; pos = current_pos(); typ = Tunknown }

# 59 "parser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* BOOL *);
  259 (* COLON *);
  263 (* CONST_UNIT *);
  264 (* DOUBLE_EQUAL *);
  265 (* ELSE *);
    0 (* EOF *);
  266 (* EOI *);
  267 (* EQUAL *);
  269 (* IF *);
  270 (* IN *);
  271 (* INT *);
  272 (* LET *);
  273 (* LPAREN *);
  274 (* MINUS *);
  275 (* NEQ *);
  276 (* NOT *);
  277 (* OR *);
  278 (* PLUS *);
  279 (* PRINT_INT *);
  280 (* PRINT_NEWLINE *);
  281 (* REC *);
  282 (* RPAREN *);
  283 (* SEMI *);
  284 (* SLASH *);
  285 (* STAR *);
  286 (* THEN *);
  287 (* UNIT *);
  288 (* REF *);
  289 (* GET_REF *);
  290 (* SET_REF *);
  291 (* NONE *);
  292 (* SOME *);
  293 (* OPTION *);
  294 (* TYPE *);
  295 (* MUTABLE *);
  296 (* LBRACE *);
  297 (* RBRACE *);
  298 (* DOT *);
  299 (* LT_MINUS *);
    0|]

let yytransl_block = [|
  260 (* COMP *);
  261 (* CONST_BOOL *);
  262 (* CONST_INT *);
  268 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\008\000\008\000\009\000\009\000\007\000\007\000\007\000\007\000\
\007\000\007\000\005\000\006\000\006\000\010\000\010\000\010\000\
\010\000\010\000\010\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\013\000\011\000\011\000\011\000\011\000\012\000\012\000\
\015\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\005\000\008\000\009\000\007\000\
\001\000\003\000\003\000\004\000\001\000\001\000\001\000\002\000\
\002\000\001\000\003\000\003\000\004\000\001\000\003\000\001\000\
\002\000\003\000\001\000\001\000\002\000\003\000\003\000\003\000\
\003\000\006\000\002\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\002\000\002\000\002\000\003\000\002\000\007\000\
\003\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\052\000\053\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\022\000\000\000\024\000\000\000\027\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\001\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\032\000\000\000\
\050\000\000\000\000\000\014\000\018\000\015\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\000\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\010\000\
\006\000\000\000\000\000\007\000"

let yydgoto = "\002\000\
\020\000\021\000\022\000\023\000\036\000\070\000\096\000\118\000\
\119\000\024\000\025\000\047\000\026\000\030\000\048\000"

let yysindex = "\011\000\
\009\001\000\000\000\000\000\000\000\000\031\001\045\001\050\255\
\045\001\045\001\045\001\031\001\031\001\031\001\031\001\000\000\
\045\001\009\255\013\255\000\000\042\000\009\001\078\001\015\255\
\000\000\025\255\000\000\194\000\000\000\000\000\250\254\097\001\
\077\255\058\255\062\255\065\255\116\001\070\255\000\000\015\255\
\015\255\015\255\015\255\000\000\076\255\085\255\061\255\079\255\
\000\000\000\000\045\001\045\001\045\001\000\000\045\001\045\001\
\045\001\045\001\045\001\045\001\045\001\099\255\045\001\000\000\
\102\255\045\001\007\255\045\001\105\255\119\255\097\255\115\255\
\045\001\000\000\087\255\045\001\000\000\013\255\070\002\251\254\
\251\254\070\255\251\254\065\002\070\255\000\000\000\000\043\002\
\000\000\006\002\139\001\000\000\000\000\000\000\000\000\046\255\
\158\001\125\255\108\255\007\255\128\255\045\001\180\001\252\254\
\006\002\000\000\045\001\000\000\000\000\045\001\097\255\023\255\
\007\255\199\001\000\000\132\255\124\255\101\255\116\255\006\002\
\006\002\000\000\045\001\026\255\045\001\007\255\141\255\136\255\
\252\254\221\001\045\001\006\002\046\255\007\255\000\000\000\000\
\000\000\243\001\046\255\000\000"

let yyrindex = "\000\000\
\147\000\000\000\000\000\000\000\000\000\063\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\000\000\000\185\255\
\000\000\111\255\000\000\219\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\099\000\000\000\253\255\
\031\000\065\000\150\255\000\000\000\000\000\000\000\000\107\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\255\183\000\
\211\000\127\000\239\000\022\002\155\000\000\000\000\000\191\255\
\000\000\225\255\000\000\000\000\000\000\000\000\000\000\000\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\243\254\000\000\000\000\000\000\000\000\000\000\146\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\109\255\003\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\002\255\000\000\000\000\000\000\
\000\000\000\000\038\255\000\000"

let yygindex = "\000\000\
\000\000\139\000\000\000\249\255\094\000\186\255\161\255\036\000\
\000\000\095\000\000\000\088\000\061\002\142\000\000\000"

let yytablesize = 867
let yytable = "\032\000\
\101\000\037\000\038\000\039\000\112\000\065\000\039\000\116\000\
\092\000\044\000\019\000\001\000\055\000\057\000\039\000\039\000\
\058\000\124\000\093\000\039\000\045\000\094\000\059\000\060\000\
\046\000\019\000\039\000\057\000\011\000\035\000\133\000\039\000\
\039\000\123\000\117\000\039\000\131\000\095\000\139\000\039\000\
\122\000\049\000\011\000\079\000\080\000\081\000\039\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\108\000\090\000\
\062\000\108\000\091\000\109\000\097\000\033\000\109\000\024\000\
\012\000\103\000\024\000\063\000\105\000\071\000\024\000\024\000\
\024\000\072\000\034\000\073\000\024\000\108\000\012\000\067\000\
\024\000\024\000\109\000\024\000\024\000\035\000\075\000\068\000\
\024\000\024\000\024\000\024\000\024\000\069\000\114\000\076\000\
\024\000\059\000\060\000\120\000\028\000\077\000\121\000\024\000\
\024\000\078\000\040\000\041\000\042\000\043\000\089\000\027\000\
\068\000\069\000\027\000\130\000\098\000\132\000\027\000\027\000\
\027\000\100\000\028\000\138\000\027\000\102\000\104\000\067\000\
\027\000\027\000\113\000\027\000\027\000\111\000\126\000\127\000\
\027\000\027\000\027\000\027\000\027\000\128\000\129\000\134\000\
\027\000\135\000\002\000\055\000\020\000\009\000\025\000\027\000\
\027\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\050\000\025\000\099\000\025\000\136\000\106\000\025\000\025\000\
\025\000\064\000\025\000\025\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\000\000\000\000\025\000\025\000\
\025\000\028\000\000\000\000\000\028\000\025\000\025\000\000\000\
\028\000\028\000\028\000\000\000\000\000\000\000\028\000\046\000\
\046\000\000\000\028\000\028\000\046\000\028\000\028\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\000\000\
\046\000\046\000\028\000\058\000\046\000\000\000\058\000\000\000\
\000\000\028\000\058\000\058\000\058\000\000\000\000\000\046\000\
\058\000\049\000\049\000\000\000\058\000\058\000\049\000\058\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\000\000\049\000\049\000\058\000\042\000\049\000\000\000\
\042\000\000\000\000\000\058\000\042\000\042\000\042\000\000\000\
\000\000\049\000\042\000\034\000\034\000\000\000\042\000\042\000\
\034\000\042\000\042\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\000\000\034\000\034\000\042\000\043\000\
\034\000\000\000\043\000\000\000\000\000\042\000\043\000\043\000\
\043\000\000\000\000\000\034\000\043\000\041\000\041\000\000\000\
\043\000\043\000\041\000\043\000\043\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\000\000\041\000\041\000\
\043\000\045\000\041\000\000\000\045\000\000\000\000\000\043\000\
\045\000\045\000\045\000\000\000\000\000\041\000\045\000\048\000\
\048\000\000\000\045\000\045\000\048\000\045\000\045\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\000\000\
\048\000\048\000\045\000\029\000\048\000\000\000\029\000\000\000\
\000\000\045\000\029\000\029\000\029\000\000\000\000\000\048\000\
\029\000\000\000\000\000\000\000\029\000\029\000\000\000\029\000\
\029\000\000\000\000\000\000\000\029\000\029\000\000\000\031\000\
\029\000\000\000\031\000\000\000\029\000\000\000\031\000\031\000\
\031\000\000\000\000\000\029\000\031\000\000\000\000\000\000\000\
\031\000\031\000\000\000\031\000\031\000\000\000\000\000\000\000\
\031\000\031\000\000\000\030\000\031\000\000\000\030\000\000\000\
\031\000\000\000\030\000\030\000\030\000\000\000\000\000\031\000\
\030\000\000\000\000\000\000\000\030\000\030\000\000\000\030\000\
\030\000\000\000\000\000\000\000\030\000\030\000\000\000\038\000\
\030\000\000\000\038\000\000\000\030\000\000\000\038\000\038\000\
\038\000\000\000\000\000\030\000\038\000\000\000\003\000\004\000\
\005\000\038\000\000\000\038\000\000\000\027\000\000\000\000\000\
\038\000\038\000\009\000\036\000\038\000\000\000\036\000\000\000\
\038\000\000\000\036\000\036\000\036\000\000\000\000\000\038\000\
\036\000\000\000\015\000\000\000\016\000\036\000\000\000\036\000\
\000\000\019\000\000\000\062\000\036\000\036\000\000\000\037\000\
\036\000\000\000\037\000\000\000\036\000\000\000\037\000\037\000\
\037\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\
\000\000\037\000\000\000\037\000\000\000\000\000\000\000\000\000\
\037\000\037\000\000\000\000\000\037\000\003\000\004\000\005\000\
\037\000\000\000\000\000\000\000\006\000\007\000\000\000\037\000\
\008\000\009\000\010\000\000\000\011\000\000\000\000\000\012\000\
\013\000\000\000\000\000\003\000\004\000\005\000\000\000\000\000\
\014\000\015\000\027\000\016\000\017\000\000\000\018\000\009\000\
\019\000\003\000\004\000\005\000\000\000\000\000\000\000\000\000\
\006\000\007\000\000\000\000\000\031\000\009\000\010\000\015\000\
\011\000\016\000\029\000\012\000\013\000\000\000\019\000\000\000\
\029\000\029\000\029\000\029\000\014\000\015\000\051\000\016\000\
\017\000\052\000\000\000\000\000\019\000\053\000\000\000\054\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\051\000\057\000\058\000\052\000\000\000\000\000\000\000\
\053\000\059\000\060\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\055\000\056\000\051\000\057\000\058\000\052\000\
\000\000\000\000\000\000\053\000\059\000\060\000\066\000\000\000\
\000\000\000\000\061\000\000\000\000\000\055\000\056\000\000\000\
\057\000\058\000\000\000\051\000\000\000\074\000\052\000\059\000\
\060\000\000\000\053\000\107\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\051\000\057\000\
\058\000\052\000\000\000\000\000\000\000\053\000\059\000\060\000\
\000\000\000\000\000\000\110\000\061\000\000\000\000\000\055\000\
\056\000\000\000\057\000\058\000\051\000\000\000\000\000\052\000\
\000\000\059\000\060\000\053\000\000\000\115\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\051\000\
\057\000\058\000\052\000\000\000\000\000\000\000\053\000\059\000\
\060\000\000\000\000\000\000\000\125\000\061\000\000\000\000\000\
\055\000\056\000\000\000\057\000\058\000\051\000\000\000\000\000\
\052\000\000\000\059\000\060\000\053\000\000\000\137\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\000\000\057\000\058\000\051\000\000\000\000\000\052\000\000\000\
\059\000\060\000\053\000\000\000\140\000\000\000\061\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\051\000\057\000\
\058\000\052\000\000\000\000\000\000\000\053\000\059\000\060\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\055\000\
\056\000\000\000\057\000\058\000\000\000\000\000\040\000\040\000\
\000\000\059\000\060\000\040\000\000\000\000\000\000\000\061\000\
\000\000\000\000\040\000\051\000\000\000\000\000\052\000\040\000\
\040\000\000\000\053\000\040\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\055\000\056\000\040\000\057\000\
\058\000\051\000\000\000\000\000\052\000\000\000\059\000\060\000\
\053\000\052\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\055\000\056\000\000\000\000\000\058\000\055\000\
\056\000\000\000\000\000\058\000\059\000\060\000\000\000\000\000\
\000\000\059\000\060\000"

let yycheck = "\007\000\
\071\000\009\000\010\000\011\000\100\000\012\001\001\001\012\001\
\002\001\017\000\011\001\001\000\018\001\027\001\009\001\010\001\
\022\001\113\000\012\001\014\001\012\001\015\001\028\001\029\001\
\012\001\026\001\021\001\041\001\027\001\036\001\126\000\026\001\
\027\001\011\001\039\001\030\001\011\001\031\001\134\000\034\001\
\111\000\000\000\041\001\051\000\052\000\053\000\041\001\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\032\001\063\000\
\042\001\032\001\066\000\037\001\068\000\012\001\037\001\001\001\
\027\001\073\000\004\001\043\001\076\000\012\001\008\001\009\001\
\010\001\012\001\025\001\011\001\014\001\032\001\041\001\003\001\
\018\001\019\001\037\001\021\001\022\001\036\001\011\001\011\001\
\026\001\027\001\028\001\029\001\030\001\017\001\102\000\011\001\
\034\001\028\001\029\001\107\000\006\000\041\001\110\000\041\001\
\042\001\027\001\012\000\013\000\014\000\015\000\012\001\001\001\
\011\001\017\001\004\001\123\000\012\001\125\000\008\001\009\001\
\010\001\003\001\028\000\131\000\014\001\011\001\040\001\003\001\
\018\001\019\001\003\001\021\001\022\001\026\001\003\001\012\001\
\026\001\027\001\028\001\029\001\030\001\041\001\027\001\003\001\
\034\001\010\001\000\000\041\001\003\001\041\001\001\001\041\001\
\042\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\022\000\012\001\069\000\014\001\129\000\078\000\017\001\018\001\
\019\001\028\000\021\001\022\001\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\035\001\001\001\255\255\255\255\004\001\040\001\041\001\255\255\
\008\001\009\001\010\001\255\255\255\255\255\255\014\001\009\001\
\010\001\255\255\018\001\019\001\014\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\026\001\027\001\034\001\001\001\030\001\255\255\004\001\255\255\
\255\255\041\001\008\001\009\001\010\001\255\255\255\255\041\001\
\014\001\009\001\010\001\255\255\018\001\019\001\014\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\255\255\026\001\027\001\034\001\001\001\030\001\255\255\
\004\001\255\255\255\255\041\001\008\001\009\001\010\001\255\255\
\255\255\041\001\014\001\009\001\010\001\255\255\018\001\019\001\
\014\001\021\001\022\001\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\255\255\026\001\027\001\034\001\001\001\
\030\001\255\255\004\001\255\255\255\255\041\001\008\001\009\001\
\010\001\255\255\255\255\041\001\014\001\009\001\010\001\255\255\
\018\001\019\001\014\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\255\255\026\001\027\001\
\034\001\001\001\030\001\255\255\004\001\255\255\255\255\041\001\
\008\001\009\001\010\001\255\255\255\255\041\001\014\001\009\001\
\010\001\255\255\018\001\019\001\014\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\026\001\027\001\034\001\001\001\030\001\255\255\004\001\255\255\
\255\255\041\001\008\001\009\001\010\001\255\255\255\255\041\001\
\014\001\255\255\255\255\255\255\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\001\001\
\030\001\255\255\004\001\255\255\034\001\255\255\008\001\009\001\
\010\001\255\255\255\255\041\001\014\001\255\255\255\255\255\255\
\018\001\019\001\255\255\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\001\001\030\001\255\255\004\001\255\255\
\034\001\255\255\008\001\009\001\010\001\255\255\255\255\041\001\
\014\001\255\255\255\255\255\255\018\001\019\001\255\255\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\001\001\
\030\001\255\255\004\001\255\255\034\001\255\255\008\001\009\001\
\010\001\255\255\255\255\041\001\014\001\255\255\005\001\006\001\
\007\001\019\001\255\255\021\001\255\255\012\001\255\255\255\255\
\026\001\027\001\017\001\001\001\030\001\255\255\004\001\255\255\
\034\001\255\255\008\001\009\001\010\001\255\255\255\255\041\001\
\014\001\255\255\033\001\255\255\035\001\019\001\255\255\021\001\
\255\255\040\001\255\255\042\001\026\001\027\001\255\255\001\001\
\030\001\255\255\004\001\255\255\034\001\255\255\008\001\009\001\
\010\001\255\255\255\255\041\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\021\001\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\030\001\005\001\006\001\007\001\
\034\001\255\255\255\255\255\255\012\001\013\001\255\255\041\001\
\016\001\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\255\255\255\255\005\001\006\001\007\001\255\255\255\255\
\032\001\033\001\012\001\035\001\036\001\255\255\038\001\017\001\
\040\001\005\001\006\001\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\016\001\017\001\018\001\033\001\
\020\001\035\001\006\000\023\001\024\001\255\255\040\001\255\255\
\012\000\013\000\014\000\015\000\032\001\033\001\001\001\035\001\
\036\001\004\001\255\255\255\255\040\001\008\001\255\255\010\001\
\028\000\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\001\001\021\001\022\001\004\001\255\255\255\255\255\255\
\008\001\028\001\029\001\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\018\001\019\001\001\001\021\001\022\001\004\001\
\255\255\255\255\255\255\008\001\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\255\255\255\255\018\001\019\001\255\255\
\021\001\022\001\255\255\001\001\255\255\026\001\004\001\028\001\
\029\001\255\255\008\001\009\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\001\001\021\001\
\022\001\004\001\255\255\255\255\255\255\008\001\028\001\029\001\
\255\255\255\255\255\255\014\001\034\001\255\255\255\255\018\001\
\019\001\255\255\021\001\022\001\001\001\255\255\255\255\004\001\
\255\255\028\001\029\001\008\001\255\255\010\001\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\001\001\
\021\001\022\001\004\001\255\255\255\255\255\255\008\001\028\001\
\029\001\255\255\255\255\255\255\014\001\034\001\255\255\255\255\
\018\001\019\001\255\255\021\001\022\001\001\001\255\255\255\255\
\004\001\255\255\028\001\029\001\008\001\255\255\010\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\021\001\022\001\001\001\255\255\255\255\004\001\255\255\
\028\001\029\001\008\001\255\255\010\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\001\001\021\001\
\022\001\004\001\255\255\255\255\255\255\008\001\028\001\029\001\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\018\001\
\019\001\255\255\021\001\022\001\255\255\255\255\009\001\010\001\
\255\255\028\001\029\001\014\001\255\255\255\255\255\255\034\001\
\255\255\255\255\021\001\001\001\255\255\255\255\004\001\026\001\
\027\001\255\255\008\001\030\001\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\018\001\019\001\041\001\021\001\
\022\001\001\001\255\255\255\255\004\001\255\255\028\001\029\001\
\008\001\004\001\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\022\001\018\001\
\019\001\255\255\255\255\022\001\028\001\029\001\255\255\255\255\
\255\255\028\001\029\001"

let yynames_const = "\
  AND\000\
  BOOL\000\
  COLON\000\
  CONST_UNIT\000\
  DOUBLE_EQUAL\000\
  ELSE\000\
  EOF\000\
  EOI\000\
  EQUAL\000\
  IF\000\
  IN\000\
  INT\000\
  LET\000\
  LPAREN\000\
  MINUS\000\
  NEQ\000\
  NOT\000\
  OR\000\
  PLUS\000\
  PRINT_INT\000\
  PRINT_NEWLINE\000\
  REC\000\
  RPAREN\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  THEN\000\
  UNIT\000\
  REF\000\
  GET_REF\000\
  SET_REF\000\
  NONE\000\
  SOME\000\
  OPTION\000\
  TYPE\000\
  MUTABLE\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  LT_MINUS\000\
  "

let yynames_block = "\
  COMP\000\
  CONST_BOOL\000\
  CONST_INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr_seq) in
    Obj.repr(
# 85 "parser.mly"
                ( _1 )
# 478 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                 ( [] )
# 484 "parser.ml"
               : 'instr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_seq) in
    Obj.repr(
# 90 "parser.mly"
                        ( _1 :: _2 )
# 492 "parser.ml"
               : 'instr_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
    ( Icompute _1 )
# 499 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'typed_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
    ( Ilet (fst _2, snd _2, _4) )
# 507 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'typed_ident_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
    ( Ifun (false, _2, _3, _5, _7) )
# 517 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typed_ident_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
    ( Ifun (true, _3, _4, _6, _8) )
# 527 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'field_decl_seq) in
    Obj.repr(
# 104 "parser.mly"
    ( Istruct (_2, _5) )
# 535 "parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_decl) in
    Obj.repr(
# 111 "parser.mly"
    ( [_1] )
# 542 "parser.ml"
               : 'field_decl_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_decl_seq) in
    Obj.repr(
# 113 "parser.mly"
    ( _1 :: _3 )
# 550 "parser.ml"
               : 'field_decl_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 118 "parser.mly"
    ( (_1, Fimmutable _3) )
# 558 "parser.ml"
               : 'field_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 120 "parser.mly"
    ( (_2, Fmutable _4) )
# 566 "parser.ml"
               : 'field_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
    ( Tunit )
# 572 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
    ( Tbool )
# 578 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
    ( Tint )
# 584 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 133 "parser.mly"
    ( Tref _1 )
# 591 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 137 "parser.mly"
    ( Toption _1 )
# 598 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parser.mly"
    ( Tident _1 )
# 605 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 147 "parser.mly"
    ( (_1, _3) )
# 613 "parser.ml"
               : 'typed_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typed_ident) in
    Obj.repr(
# 151 "parser.mly"
    ( [_2] )
# 620 "parser.ml"
               : 'typed_ident_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typed_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typed_ident_list) in
    Obj.repr(
# 153 "parser.mly"
    ( _2 :: _4 )
# 628 "parser.ml"
               : 'typed_ident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 158 "parser.mly"
    ( mk_node _1 )
# 635 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
    ( _2 )
# 642 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "parser.mly"
    ( mk_node (Eident _1) )
# 649 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 165 "parser.mly"
    ( mk_node (Egetref _2) )
# 656 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_def_seq) in
    Obj.repr(
# 169 "parser.mly"
    ( mk_node (Estruct _2) )
# 663 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_expr) in
    Obj.repr(
# 171 "parser.mly"
    ( let e, id = _1 in mk_node (Eget (e, id)) )
# 670 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 176 "parser.mly"
    ( _1 )
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
    ( mk_node (Eunop (Uminus, _2)) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
    ( mk_node (Ebinop (Badd, _1, _3)) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
    ( mk_node (Ebinop (Bsub, _1, _3)) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
    ( mk_node (Ebinop (Bmul, _1, _3)) )
# 708 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
    ( mk_node (Ebinop (Bdiv, _1, _3)) )
# 716 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
    ( mk_node (Eif (_2, _4, _6)) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
    ( mk_node (Eunop (Unot, _2)) )
# 732 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
    ( mk_node (Ebinop (Beq, _1, _3)) )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
    ( mk_node (Ebinop (Bneq, _1, _3)) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
    ( mk_node (Ebinop (_2, _1, _3)) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
    ( mk_node (Ebinop (Band, _1, _3)) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
    ( mk_node (Ebinop (Bor, _1, _3)) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
    ( mk_node (Eletin (_2, _4, _6)) )
# 782 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 208 "parser.mly"
    ( mk_node (Eprint_int _2) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 210 "parser.mly"
    ( mk_node (Eprint_newline _2) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 213 "parser.mly"
    ( mk_node (Eapp (_1, _2)) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 217 "parser.mly"
    ( mk_node (Eunop (Uref, _2)) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
    ( mk_node (Esetref (_1, _3)) )
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 224 "parser.mly"
    ( mk_node (Eunop (Usome, _2)) )
# 826 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 226 "parser.mly"
    ( mk_node (Eletopt (_3, _5, _7)) )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 231 "parser.mly"
    ( let e, id = _1 in mk_node (Eset (e, id, _3)) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 239 "parser.mly"
    ( (_1, _3) )
# 851 "parser.ml"
               : 'field_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "parser.mly"
    ( Econst Cunit )
# 857 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 247 "parser.mly"
    ( Econst (Cbool _1) )
# 864 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 249 "parser.mly"
    ( Econst (Cint _1) )
# 871 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
    ( Econst Cnone )
# 877 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_def) in
    Obj.repr(
# 259 "parser.mly"
    ( [_1] )
# 884 "parser.ml"
               : 'field_def_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_def) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_def_seq) in
    Obj.repr(
# 261 "parser.mly"
    ( _1 :: _3 )
# 892 "parser.ml"
               : 'field_def_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 266 "parser.mly"
    ( (_1, _3) )
# 900 "parser.ml"
               : 'field_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 272 "parser.mly"
    ( [_1] )
# 907 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 274 "parser.mly"
    ( _1 :: _2 )
# 915 "parser.ml"
               : 'args))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
