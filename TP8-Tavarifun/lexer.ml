# 1 "lexer.mll"
 

  open Lexing
  open Parser
  open Ast
  open Error

  let current_pos b =
    lexeme_start_p b,
    lexeme_end_p b

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [
	"print_int",     PRINT_INT;
	"print_newline", PRINT_NEWLINE;
	"true",          CONST_BOOL(true);
	"false",         CONST_BOOL(false);
	"not",           NOT;
	"if",            IF;
	"then",          THEN;
	"else",          ELSE;
	"let",           LET;
	"in",            IN;
	"rec",           REC;
	"bool",          BOOL;
	"int",           INT;
	"unit",          UNIT;
	(* DIFF - Références *)
	"ref",           REF;
	(* ENDIFF *)
	(* DIFF - Options *)
	"option",        OPTION;
	(* ENDIFF *)
	(* DIFF - Structures *)
	"type",          TYPE;
	"mutable",       MUTABLE;
	(* ENDIFF *)
      ];
    fun s ->
      try Hashtbl.find h s with Not_found -> IDENT s
	
  let comment_cpt = ref 0


# 49 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\222\255\223\255\225\255\227\255\228\255\015\000\016\000\
    \002\000\089\000\005\000\001\000\019\000\004\000\005\000\006\000\
    \244\255\245\255\246\255\247\255\009\000\249\255\036\000\028\000\
    \002\000\255\255\251\255\253\255\248\255\243\255\242\255\240\255\
    \224\255\238\255\237\255\236\255\231\255\020\000\030\000\230\255\
    \023\000\032\000\229\255\031\000\252\255\253\255\003\000\030\000\
    \255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\032\000\032\000\
    \022\000\020\000\032\000\032\000\016\000\014\000\023\000\021\000\
    \255\255\255\255\255\255\255\255\029\000\255\255\003\000\005\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\002\000\
    \255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\045\000\000\000\000\000\255\255\255\255\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\024\000\000\000\024\000\000\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\014\000\024\000\000\000\000\000\000\000\011\000\034\000\
    \023\000\021\000\017\000\018\000\049\000\019\000\003\000\016\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\008\000\020\000\012\000\015\000\013\000\036\000\
    \032\000\031\000\030\000\029\000\028\000\026\000\027\000\047\000\
    \048\000\046\000\000\000\000\000\000\000\000\000\007\000\000\000\
    \033\000\000\000\000\000\006\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\000\000\009\000\
    \000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\005\000\010\000\004\000\040\000\037\000\
    \009\000\035\000\038\000\039\000\041\000\042\000\000\000\000\000\
    \000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\255\255\000\000\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\024\000\255\255\255\255\255\255\000\000\011\000\
    \000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
    \012\000\013\000\014\000\015\000\020\000\023\000\023\000\043\000\
    \047\000\043\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \012\000\255\255\255\255\000\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\007\000\
    \009\000\010\000\037\000\038\000\040\000\041\000\255\255\255\255\
    \255\255\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\255\255\255\255\255\255\255\255\
    \009\000\255\255\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\043\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 55 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 186 "lexer.ml"

  | 1 ->
# 57 "lexer.mll"
      ( token lexbuf )
# 191 "lexer.ml"

  | 2 ->
# 59 "lexer.mll"
      ( incr comment_cpt; comment lexbuf; token lexbuf )
# 196 "lexer.ml"

  | 3 ->
# 62 "lexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 201 "lexer.ml"

  | 4 ->
# 64 "lexer.mll"
      ( CONST_UNIT )
# 206 "lexer.ml"

  | 5 ->
# 67 "lexer.mll"
      ( LPAREN )
# 211 "lexer.ml"

  | 6 ->
# 69 "lexer.mll"
      ( RPAREN )
# 216 "lexer.ml"

  | 7 ->
# 71 "lexer.mll"
      ( EOI )
# 221 "lexer.ml"

  | 8 ->
# 74 "lexer.mll"
      ( MINUS )
# 226 "lexer.ml"

  | 9 ->
# 76 "lexer.mll"
      ( PLUS )
# 231 "lexer.ml"

  | 10 ->
# 78 "lexer.mll"
      ( STAR )
# 236 "lexer.ml"

  | 11 ->
# 80 "lexer.mll"
      ( SLASH )
# 241 "lexer.ml"

  | 12 ->
# 83 "lexer.mll"
      ( DOUBLE_EQUAL )
# 246 "lexer.ml"

  | 13 ->
# 85 "lexer.mll"
      ( NEQ )
# 251 "lexer.ml"

  | 14 ->
# 87 "lexer.mll"
      ( COMP Bgt )
# 256 "lexer.ml"

  | 15 ->
# 89 "lexer.mll"
      ( COMP Bge )
# 261 "lexer.ml"

  | 16 ->
# 91 "lexer.mll"
      ( COMP Blt )
# 266 "lexer.ml"

  | 17 ->
# 93 "lexer.mll"
      ( COMP Ble )
# 271 "lexer.ml"

  | 18 ->
# 95 "lexer.mll"
      ( AND )
# 276 "lexer.ml"

  | 19 ->
# 97 "lexer.mll"
      ( OR )
# 281 "lexer.ml"

  | 20 ->
# 100 "lexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 286 "lexer.ml"

  | 21 ->
# 102 "lexer.mll"
      ( EQUAL )
# 291 "lexer.ml"

  | 22 ->
# 105 "lexer.mll"
      ( COLON )
# 296 "lexer.ml"

  | 23 ->
# 109 "lexer.mll"
      ( GET_REF )
# 301 "lexer.ml"

  | 24 ->
# 111 "lexer.mll"
      ( SET_REF )
# 306 "lexer.ml"

  | 25 ->
# 116 "lexer.mll"
      ( NONE )
# 311 "lexer.ml"

  | 26 ->
# 118 "lexer.mll"
      ( SOME )
# 316 "lexer.ml"

  | 27 ->
# 123 "lexer.mll"
      ( LBRACE )
# 321 "lexer.ml"

  | 28 ->
# 125 "lexer.mll"
      ( RBRACE )
# 326 "lexer.ml"

  | 29 ->
# 127 "lexer.mll"
      ( SEMI )
# 331 "lexer.ml"

  | 30 ->
# 129 "lexer.mll"
      ( DOT )
# 336 "lexer.ml"

  | 31 ->
# 131 "lexer.mll"
      ( LT_MINUS )
# 341 "lexer.ml"

  | 32 ->
# 135 "lexer.mll"
      ( error (Lexical_error (lexeme lexbuf)) (current_pos lexbuf) )
# 346 "lexer.ml"

  | 33 ->
# 137 "lexer.mll"
      ( EOF )
# 351 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 43
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 141 "lexer.mll"
      ( incr comment_cpt; comment lexbuf )
# 362 "lexer.ml"

  | 1 ->
# 143 "lexer.mll"
      ( decr comment_cpt; if !comment_cpt > 0 then comment lexbuf )
# 367 "lexer.ml"

  | 2 ->
# 145 "lexer.mll"
      ( comment lexbuf )
# 372 "lexer.ml"

  | 3 ->
# 147 "lexer.mll"
      ( error (Lexical_error "unterminated comment") (current_pos lexbuf) )
# 377 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

